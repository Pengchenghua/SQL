--获取每天库存信息
--获取批次信息   表: csx_ods.accounting_stock_log_item_ods

--获取每天库存信息
-- 更改以下
drop table csx_ods.wms_h_stock_temp01;
create temporary table csx_ods.wms_h_stock_temp01
as 
select
	a.*,
	b.edate
from
(
	select distinct
		*		
	from 
		csx_ods.wms_accounting_stock_detail_view_ods
	where 
		sdt=regexp_replace(date_sub(current_date,1),'-','') 
) a 
join 
( 
	select 
		max(id) as max_id,
		product_code,
		location_code,
		reservoir_area_code
	from 
		csx_ods.wms_accounting_stock_detail_view_ods
	where 
		sdt=regexp_replace(date_sub(current_date,1),'-','')
		and regexp_replace(to_date(biz_time),'-','')< '20191101'
	group by 
		product_code,
		location_code,
		reservoir_area_code
) b on a.id=b.max_id;



--库存信息每日维度详情
drop table csx_ods.wms_h_stock_temp02;
create temporary table csx_ods.wms_h_stock_temp02
as 
select
	a.*,
	b.goods_id as goods_code,
	b.bar_code as goods_bar_code,
	b.goods_name as goods_name,
	b.division_code as div_id,
	b.division_name as div_name,
	b.department_id as dept_id,
	b.department_name as dept_name,
	b.category_large_code as catg_l_code,
	b.category_large_name as catg_l_name,
	b.category_middle_code as catg_m_code,
	b.category_middle_name as catg_m_name,
	b.category_small_code as catg_s_code,
	b.category_small_name as catg_s_name,
	b.standard as standard,
	if(c.goods_code is not null, '是', '否') as is_factory_goods,
	if(c.goods_code is not null, 1, 0) as is_factory_code	
from 
	csx_ods.wms_h_stock_temp01 as a
left join
	csx_dw.goods_m as b
on  b.sdt=regexp_replace(date_sub(current_date,1),'-','') and a.product_code=b.goods_id
left join
(
	select distinct 
		goods_code 
	from 
		csx_dw.factory_bom 
  	where 
  		sdt = 'current'   
) as c on  a.product_code =c.goods_code;


--获取入库商品每日最后一次入库日期
drop table csx_ods.wms_h_entry_temp01;
create temporary table csx_ods.wms_h_entry_temp01
as 
select
	a.*,
	b.edate
from 
(
	select distinct
		*
	from
		csx_ods.wms_entry_batch_detail_ods
	where 
		sdt>='20191015'		--增量导入的时候是跨了夜（2天）所以需要去重、
) a
join
(
	select 
		max(id) as max_id,
		product_code,
		location_code,
		reservoir_area_code,
		regexp_replace(to_date(update_time), '-', '') as edate
		
	from
		csx_ods.wms_entry_batch_detail_ods
	where 
		sdt>='20191015'
	group by 
		product_code,
		location_code,
		reservoir_area_code,
		regexp_replace(to_date(update_time), '-', '')
) b on a.id=b.max_id;


--根据库存日期筛选得到最后一次入库日期的
drop table csx_ods.wms_h_entry_temp02;
create temporary table csx_ods.wms_h_entry_temp02
as 
select
	h1.location_code as location_code,
	h1.reservoir_area_code as reservoir_area_code,
	h1.product_code as product_code,
	h1.edate as edate,
	h1.max_sdt as max_sdt,
	h2.update_time as update_time,
	h2.receive_qty as receive_qty

from 
(
	select
		b.product_code as product_code,
		b.location_code as location_code, 
		b.reservoir_area_code as reservoir_area_code,
		b.edate as edate,
		max(a.edate) as max_sdt
	from 
		csx_ods.wms_h_stock_temp02 b 
	left join
		csx_ods.wms_h_entry_temp01  a
	on 
		a.product_code=b.goods_code 
		and 
		a.location_code=b.location_code 
		and 
		a.reservoir_area_code=b.reservoir_area_code 
	where  
		a.update_time<=b.posting_time
	group by
		b.product_code,
		b.location_code,
		b.reservoir_area_code,
		b.edate
) as h1
left join
	csx_ods.wms_h_entry_temp01 as h2
on 
	h1.location_code=h2.location_code
	and
	h1.reservoir_area_code=h2.reservoir_area_code
	and
	h1.product_code=h2.product_code
	and
	h1.max_sdt = h2.edate;



--最终数据插入到 hive 到mysql的表中
--truncate table csx_dw.fixation_report_product_stock_factory; --清空表数据、

set hive.exec.parallel=true;
set hive.exec.dynamic.partition=true;
set hive.exec.dynamic.partition.mode=nonstrict;
truncate table csx_dw.fixation_report_product_stock_factory;
insert overwrite table csx_dw.fixation_report_product_stock_factory partition (sdt)
select
	row_number() over(order by a.id desc) as id,
	a.location_code as location_code,
	a.location_name as location_name,
	a.reservoir_area_code as reservoir_area_code,
	a.reservoir_area_name as reservoir_area_name,
	a.goods_code as goods_code,
	a.goods_bar_code as goods_bar_code,
	a.goods_name as goods_name,
	a.div_id as div_id,
	a.div_name as div_name,
	a.dept_id as dept_id,
	a.dept_name as dept_name,
	a.catg_l_code as catg_l_code,
	a.catg_l_name as catg_l_name,
	a.catg_m_code as catg_m_code,
	a.catg_m_name as catg_m_name,
	a.catg_s_code as catg_s_code,
	a.catg_s_name as catg_s_name,
	a.standard as unit_name,
	a.unit as unit,
	a.after_price as avg_price,
	a.after_qty as stock_qty,
	a.after_amt as stock_amt,
--	b.max_sdt as last_in_datetime,
	split(b.update_time,'\\.')[0] as last_in_datetime,
	b.receive_qty as last_in_qty,
	a.is_factory_goods as is_factory_goods,
	a.is_factory_code as is_factory_code,
	from_unixtime(unix_timestamp(),'yyyy-MM-dd HH:mm:ss') as update_time,
	a.edate as sdt
	
from 
	csx_ods.wms_h_stock_temp02 a
join
	csx_ods.wms_h_entry_temp02 b 
on 
	a.location_code=b.location_code 
	and 
	a.reservoir_area_code=b.reservoir_area_code
	and 
	a.product_code=b.product_code
	and
	a.edate=b.edate;

-------建表语句：
drop table csx_dw.fixation_report_product_stock_factory;
create table csx_dw.fixation_report_product_stock_factory (
	id bigint comment '编号id',
	location_code string comment '地点编码',
	location_name string comment '地点名称',
	reservoir_area_code string comment '库区编码',
	reservoir_area_name string comment '库区名称',
	goods_code string comment '商品编码',
	goods_bar_code string comment '商品条码',
	goods_name string comment '商品名称',
	div_id string comment '部类编码',
	div_name string comment '部类名称',
	dept_id string comment '课组编码',
	dept_name string comment '课组名称',
	catg_l_code string comment '大类编码',
	catg_l_name string comment '大类名称',
	catg_m_code string comment '中类编码',
	catg_m_name string comment '中类名称',
	catg_s_code string comment '小类编码',
	catg_s_name string comment '小类名称',
	unit_name string comment '件装数',
	unit string comment '销售单位',
	avg_price decimal(26,6)  comment '平均成本',
	stock_qty decimal(26,6)  comment '库存数量',
	stock_amt decimal(26,6)  comment '库存金额',
	last_in_datetime string comment '末次入库日期',
	last_in_qty decimal(26,6)  comment '末次入库量',
	is_factory_goods string comment '是否工厂商品',
	is_factory_code int  comment '是否工厂商品编码、0标识否,1标识是',
	update_time Timestamp comment '更新时间'
	

) COMMENT '物流库存_是否工厂商品表'
partitioned by (sdt string comment '日期分区')
row format delimited
stored as textfile
LOCATION 'hdfs://nameservice1/user/hive/warehouse/csx_dw.db/fixation_report_product_stock_factory'
;

--sqoop脚本： 测试环境

sqoop export \
  --connect "jdbc:mysql://10.252.193.44:3306/csx_b2b_data_center?useUnicode=true&characterEncoding=utf-8" \
  --username csxb2data_center \
  --password 'Ur&ywI00rm&16' \
  --table fixation_report_product_stock_factory \
  --hcatalog-database csx_dw \
  --hcatalog-table fixation_report_product_stock_factory \
  --input-null-string '\\N'  \
  --input-null-non-string '\\N' 


--正式环境

sqoop export \
  --connect "jdbc:mysql://10.0.74.10:3306/csx_b2b_data_center?useUnicode=true&characterEncoding=utf-8" \
  --username csx_datacenter_app  \
  --password 'Yh2019datacen&' \
  --table fixation_report_product_stock_factory \
  --hcatalog-database csx_dw \
  --hcatalog-table fixation_report_product_stock_factory \
  --input-null-string '\\N'  \
  --input-null-non-string '\\N' 




-----进销存---------------------------------------------------------------

--获取不同月份最大id和最小id

drop table csx_ods.wms_stock_temp01;
create temporary table csx_ods.wms_stock_temp01
as 
select
	product_code ,
	location_code ,
	shipper_code ,
	reservoir_area_code,
	min(id) as min_id,
	max(id) as max_id,
	month(posting_time) as edate
from 
	csx_ods.wms_accounting_stock_detail_ods
where 
	sdt=regexp_replace(date_sub(current_date,1),'-','')
group by 
	product_code ,
	location_code ,
	shipper_code ,
	reservoir_area_code,
	month(posting_time);



-- 获取每月期初期末

 

drop table if EXISTS csx_ods.h_wms_temp01;
create temporary TABLE if not EXISTS csx_ods.h_wms_temp01 
as
select
	a.product_code ,
	goodsname,
	bar_code,
	bd_id,
	bd_name,
	unit,
	catg_l_id,
	catg_l_name ,
	dept_id ,
	dept_name,
	div_id,
	div_name,
	a.location_code,
	a.shipper_code,
	a.reservoir_area_code,
	sum( qc_qty)  qc_qty ,
	sum(qc_amt) qc_amt ,
	sum(qc_amt)/sum( qc_qty) qc_price ,
	sum(qm_qty)  qm_qty ,
	sum(qm_amt) qm_amt ,
	sum(qm_amt) /sum(qm_qty) qm_price ,
	is_factory_goods,
	is_factory_code,
	a.edate
from 
(
	select
		a.product_code ,
		a.location_code ,
		a.shipper_code  ,
		a.reservoir_area_code,
		sum( after_qty) qc_qty,
		sum(after_amt) qc_amt,
		sum( after_price) qc_price,
		0 qm_qty,
		0 qm_amt,
		0 qm_price,
		b.edate as edate
	from 
	( 
		select
			*
		from 
			csx_ods.wms_accounting_stock_detail_ods
		where 
			sdt=regexp_replace(date_sub(current_date,1),'-','')
	) a 
	join
	(
		select
			product_code ,
			location_code ,
			shipper_code ,
			reservoir_area_code,
			min_id,
			max_id,
			edate
		from 
			csx_ods.wms_stock_temp01
	
	) b on a.id=b.min_id
	group by
		a.product_code ,
		a.location_code,
		a.shipper_code,
		a.reservoir_area_code,
		b.edate
		
	union all
	
	select
		a.product_code ,
		a.location_code,
		a.shipper_code ,
		a.reservoir_area_code,
		0 qc_qty,
		0 qc_amt ,
		0 qc_price ,
		sum( after_qty) qm_qty ,
		sum(after_amt) qm_amt,
		sum( after_price) qm_price,
		b.edate as edate
	from 
	( 
		select
			*
		from 
			csx_ods.wms_accounting_stock_detail_ods
		where 
			sdt=regexp_replace(to_date(update_time), '-', '')
	) a 
	join
	(
		select
			product_code ,
			location_code ,
			shipper_code ,
			reservoir_area_code,
			min_id,
			max_id,
			edate
		from 
			csx_ods.wms_stock_temp01
	
	) b on a.id=b.max_id
	group by
		a.product_code ,
		a.location_code,
		a.shipper_code,
		a.reservoir_area_code,
		b.edate
)as  a  
left join
(
	select
		goodsid ,
		goodsname ,
		a.bar_code,
		a.bd_id ,
		a.bd_name,
		a.div_id,
		a.div_name,
		a.unit ,
		a.catg_l_id ,
		a.catg_l_name,
		a.dept_id ,
		a.dept_name ,
		if(goods_code is null, '否', '是')	as is_factory_goods,
		if(goods_code is null, 0, 1) as is_factory_code
	from
		dim.dim_goods_latest a
	left join
	(
		select distinct
			goods_code
		from
			csx_dw.factory_bom
		where
			sdt = 'current'
	)b on a.goodsid=b.goods_code

) as c	on a.product_code = c.goodsid
group by
	a.product_code,
	goodsname,
	bar_code,
	bd_id,
	bd_name,
	unit,
	catg_l_id,
	catg_l_name,
	dept_id ,
	dept_name ,
	div_id,
	div_name,
	a.location_code,
	a.shipper_code ,
	a.reservoir_area_code,
	is_factory_goods,
	is_factory_code,
	a.edate
;


--获取不同月的 报损、盘盈、盘亏
drop table if EXISTS  csx_ods.h_wms_temp02;
create temporary TABLE if not EXISTS  csx_ods.h_wms_temp02
as 
select 
	a.product_code ,
	a.location_code,
	a.location_name,
	a.reservoir_area_code,
	a.reservoir_area_name,
	a.shipper_code,
	a.shipper_name,
	month(posting_time) as edate,
	sum(case when move_type in ('101A','102A','105A','108A','120A') then  txn_qty end )as enter_qty,-- 入库数理
	sum(case when move_type in ('101A','102A','105A','108A','120A') then  txn_amt end )as enter_amt,-- 入库金额
	sum(case when move_type in ('104A','106A','103A','107A')then  txn_qty end )as out_qty,-- 出库量
	sum(case when move_type in ('104A','106A','103A','107A') then  txn_amt end )as out_amt,-- 出库
	sum(case when move_type in ('117A') then  txn_qty end )as loss_qty,-- 报损量
	sum(case when move_type in ('117A')  then  txn_amt end )as loss_amt,-- 报损额
	sum(case when move_type in ('116A') then  txn_qty end  )stock_loss_qty,-- 盘亏量
	sum(case when move_type in ('116A') then  txn_amt end  )stock_loss_amt,-- 盘亏额
	sum(case when move_type in ('115A') then  txn_qty end  )stock_profit_qty,-- 盘盈量
	sum(case when move_type in ('115A') then  txn_amt end  )stock_profit_amt   -- 盘盈额
from 
	csx_ods.wms_accounting_stock_detail_view_ods a
WHERE 	
	sdt=regexp_replace(to_date(update_time), '-', '')
group by 
	a.product_code ,
	a.location_code,
	a.location_name,
	a.reservoir_area_code,
	a.reservoir_area_name,
	a.shipper_code,
	a.shipper_name,
	month(posting_time)
;


--  未过帐盘点数据
drop table if EXISTS  csx_ods.h_wms_temp03;
create temporary TABLE if not EXISTS  csx_ods.h_wms_temp03
as 
select	
	warehouse_code ,
	product_code,
	reservoir_area_code,
	sum(inventory_qty_diff)inventory_qty_diff,
	sum(inventory_amount_diff)inventory_amt_diff,
	month(update_time) as edate
from
	csx_ods.wms_inventory_product_detail_ods a
where
	sdt >= '20191015' and posting_flag ='0' 
group by 
	warehouse_code ,
	product_code,
	reservoir_area_code,
	month(update_time)
;	

set hive.exec.parallel=true;
set hive.exec.dynamic.partition=true;
set hive.exec.dynamic.partition.mode=nonstrict;

truncate table csx_dw.fixation_report_product_entry_stock_shipped;
insert overwrite table csx_dw.fixation_report_product_entry_stock_shipped partition (sdt)
select
	a.location_code as location_code,		
	b.location_name as location_name,		
	a.reservoir_area_code as reservoir_area_code,
	b.reservoir_area_name as reservoir_area_name,
	b.shipper_code as shipper_code,		
	b.shipper_name as shipper_name,
	a.product_code as  goods_code,
	a.bar_code as goods_bar_code,
	a.goodsname  as goods_name,
	a.bd_id as bd_id,		
	a.bd_name as bd_name,	
	a.div_id as div_id,			
	a.div_name as div_name,		

	a.dept_id as dept_id,		
	a.dept_name as dept_name,	

	a.catg_l_id as catg_l_id,	
	a.catg_l_name as catg_l_name,	
	a.unit as unit,	

	a.qc_price as start_avg_price,
	a.qc_qty   as  start_qty,
	a.qc_amt   as start_amt,
	a.qm_price as end_avg_price,
	a.qm_qty  as  end_qty,
	a.qm_amt  as   end_amt,
	b.enter_qty as in_qty,
	b.enter_amt as in_amt,
	b.out_qty as out_qty,
	b.out_amt as out_amt,
	b.loss_qty as frm_qty,
	b.loss_amt as frm_amt,
	b.stock_loss_qty as account_loss_qty,
	b.stock_loss_amt as stock_loss_amt,
	b.stock_profit_qty as account_win_qty,
	b.stock_profit_amt as account_win_amt,

	b.stock_profit_qty-stock_loss_qty as account_last_qty,
	b.stock_profit_amt-stock_loss_amt as account_last_amt,
	c.inventory_qty_diff as not_account_last_qty,
	c.inventory_amt_diff as not_account_last_amt,
	a.is_factory_goods as is_factory_goods,
	a.is_factory_code as is_factory_code , 
	case when
		length(a.edate)=1 
	then 
		concat('20190',a.edate)
	else
	concat('2019',a.edate) 
	end as sdt 
from 
(
	select
		location_code as location_code,				
		reservoir_area_code as reservoir_area_code,
		product_code as  product_code,
		edate as edate,
		bar_code as bar_code,
		goodsname  as goodsname,
		bd_id as bd_id,		
		bd_name as bd_name,	
		div_id as div_id,			
		div_name as div_name,		
		
		dept_id as dept_id,		
		dept_name as dept_name,	
	
		catg_l_id as catg_l_id,	
		catg_l_name as catg_l_name,	
		unit as unit,
		qc_price as qc_price,
		qc_qty   as  qc_qty,
		qc_amt   as qc_amt,
		qm_price as qm_price,
		qm_qty  as  qm_qty,
		qm_amt  as   qm_amt,
		is_factory_goods as is_factory_goods,
		is_factory_code as is_factory_code 
		
	from
		csx_ods.h_wms_temp01 
)a
left join 
(
	select 
		product_code,
		location_code,
		location_name,
		reservoir_area_code,
		reservoir_area_name,
		shipper_code,
		shipper_name,
		enter_qty as enter_qty,
		enter_amt as enter_amt,
		out_qty as out_qty,
		out_amt as out_amt,
		loss_qty as loss_qty,
		loss_amt as loss_amt,
		stock_loss_qty as stock_loss_qty,
		stock_loss_amt as stock_loss_amt,
		stock_profit_qty as stock_profit_qty,
		stock_profit_amt as stock_profit_amt ,
		edate as edate
	from 
		csx_ods.h_wms_temp02

) as b on a.product_code=b.product_code and a.location_code=b.location_code and a.reservoir_area_code = b.reservoir_area_code and a.edate=b.edate
left join 
(
	select * from csx_ods.h_wms_temp03 
) as c on a.product_code=c.product_code and a.location_code=c.warehouse_code and  a.reservoir_area_code=c.reservoir_area_code and a.edate=c.edate;




drop table csx_dw.fixation_report_product_entry_stock_shipped;
create table  csx_dw.fixation_report_product_entry_stock_shipped(
	location_code string comment '地点编码',
	location_name string comment '地点名称',
	reservoir_area_code string comment '库区编码',
	reservoir_area_name string comment '库区名称',
	supplier_code string comment '货主编码',
	supplier_name string comment '货主名称',
	goods_code string comment '商品编码',
	goods_bar_code string comment '商品条码',
	goods_name string comment '商品名称',
	bd_id string comment '事业部',
	bd_name string comment '事业部名称',
	div_id string comment '部类编码',
	div_name string comment '部类名称',
	dept_id string comment '课组',
	dept_name string comment '课组名称',
	catg_l_code string comment '大类编码',
	catg_l_name string comment '大类名称',
	unit string comment '单位',
	start_avg_price decimal(26,6)  comment '期初平均进价',
	start_qty decimal(26,6)  comment '期初库存量',
	start_amt decimal(26,6)  comment '期初库存额',
	end_avg_price decimal(26,6)  comment '期末平均进价',
	end_qty decimal(26,6)  comment '期末库存量',
	end_amt decimal(26,6)  comment '期末库存额',
	in_qty decimal(26,6)  comment '入库量',
	in_amt decimal(26,6)  comment '入库额',
	out_qty decimal(26,6)  comment '出库量',
	out_amt decimal(26,6)  comment '出库额',
	frm_qty decimal(26,6)  comment '报损量',
	frm_amt decimal(26,6)  comment '报损金额',
	account_loss_qty decimal(26,6)  comment '过帐-盘亏量',
	account_loss_amt decimal(26,6)  comment '过账-盘亏额',
	account_win_qty decimal(26,6)  comment '过账-盘盈量',
	account_win_amt decimal(26,6)  comment '过账-盘盈额',
	account_last_qty decimal(26,6)  comment '过账-盈亏量',
	account_last_amt decimal(26,6)  comment '过账-盈亏金额',
	not_account_last_qty decimal(26,6)  comment '未过账-盈亏量',
	not_account_last_amt decimal(26,6)  comment '未过账-盈亏额',
	is_factory_goods string comment '是否工厂商品',
	is_factory_code int  comment '是否工厂商品标识 0标识否、1标识是'
	--update_time Timestamp comment '更新日期'

)COMMENT '物流库存_期初期末_盘盈盘亏'
partitioned by (sdt string comment '日期分区')
row format delimited
stored as textfile
LOCATION 'hdfs://nameservice1/user/hive/warehouse/csx_dw.db/fixation_report_product_entry_stock_shipped'
;

--impala 刷新
INVALIDATE METADATA csx_dw.fixation_report_product_entry_stock_shipper;

--sqoop脚本： 测试环境

sqoop export \
  --connect "jdbc:mysql://10.252.193.44:3306/csx_b2b_data_center?useUnicode=true&characterEncoding=utf-8" \
  --username csxb2data_center \
  --password 'Ur&ywI00rm&16' \
  --table fixation_report_product_entry_stock_shipped \
  --hcatalog-database csx_dw \
  --hcatalog-table fixation_report_product_entry_stock_shipped \
  --input-null-string '\\N'  \
  --input-null-non-string '\\N' 



--正式环境

sqoop export \
  --connect "jdbc:mysql://10.0.74.10:3306/csx_b2b_data_center?useUnicode=true&characterEncoding=utf-8" \
  --username csx_datacenter_app \
  --password 'Yh2019datacen&' \
  --table fixation_report_product_entry_stock_shipped \
  --hcatalog-database csx_dw \
  --hcatalog-table fixation_report_product_entry_stock_shipped \
  --input-null-string '\\N'  \
  --input-null-non-string '\\N' 




	

---重建调度任务依赖、
truncate table csx_ods.entry_batch_detail;
CREATE TABLE csx_ods.entry_batch_detail (
  id bigint COMMENT '主键',
  order_code string COMMENT '入库单号',
  batch_code string  COMMENT '收货批次号',
  product_code string COMMENT '商品编号',
  product_bar_code string COMMENT '商品条码',
  product_name string  COMMENT '商品名称',
  unit string  COMMENT '单位',
  produce_date string   COMMENT '生产日期',
  receive_qty decimal(10,2)  COMMENT '收货数量',
  price decimal(10,2)   COMMENT '价格',
  amount decimal(12,4)   COMMENT '金额',
  location_code string COMMENT '收货地点编码',
  location_name string  COMMENT '收货地点名称',
  reservoir_area_code string COMMENT '收货库区编码',
  reservoir_area_name string  COMMENT '收货库区名称',
  store_location_code string COMMENT '收货储位编码',
  store_location_name string  COMMENT '收货储位名称',
  shelf_reservoir_area_code string COMMENT '上架库区编码',
  shelf_reservoir_area_name string  COMMENT '上架库区名称',
  shelf_store_location_code string COMMENT '上架储位编码',
  shelf_store_location_name string  COMMENT '上架储位名称',
  shelf_qty decimal(10,2)  COMMENT '上架数量',
  remark string  COMMENT '备注',
  create_time string  COMMENT '创建时间',
  create_by string   COMMENT '创建者',
  update_time string  COMMENT '更新时间',
  update_by string   COMMENT '更新者'

) COMMENT '入库单收货批次明细'
PARTITIONED BY (sdt string COMMENT '日期分区')
STORED AS TEXTFILE 
LOCATION 'hdfs://nameservice1/user/hive/warehouse/csx_ods.db/entry_batch_detail'


-- 入库批次明细信息 

sqoop import \
 --connect jdbc:mysql://10.0.74.114:3306/csx_b2b_wms?tinyInt1isBit=false \
 --username csx_b2b_wms_select \
 --password Yh2018b2bcsx_wms_select_@% \
 --table wms_entry_batch_detail \
 --fields-terminated-by '\001' -m 1 \
 --columns 'id,order_code,batch_code,product_code,product_bar_code,product_name,unit,produce_date,receive_qty,price,amount,location_code,location_name,reservoir_area_code,reservoir_area_name,store_location_code,store_location_name,shelf_reservoir_area_code,shelf_reservoir_area_name,shelf_store_location_code,shelf_store_location_name,shelf_qty,remark,create_time,create_by,update_time,update_by' \
 --hive-drop-import-delims \
 --hive-overwrite \
 --hive-import \
 --hive-database csx_ods \
 --hive-table  entry_batch_detail \
 --hive-partition-key sdt \
 --hive-partition-value 'current'


--刷新impala 
INVALIDATE METADATA csx_ods.entry_batch_detail;


truncate table csx_ods.accounting_stock_detail_h;
 CREATE TABLE IF NOT EXISTS  csx_ods.accounting_stock_detail_h (
  id bigint,
  product_code string COMMENT '商品编码',
  location_code string COMMENT '地点编码',
  shipper_code string COMMENT '货主代码',
  ref_biz_type string COMMENT '参照业务类型',
  ref_biz_order_no string COMMENT '参照业务单号',
  biz_time string COMMENT '业务时间',
  posting_time string COMMENT '过账时间',
  before_price decimal(14,4) COMMENT '调整前单价',
  before_qty decimal(14,3) COMMENT '调整前数量',
  before_amt decimal(14,2) COMMENT '调整前金额',
  after_price decimal(14,4) COMMENT '调整后单价',
  after_qty decimal(14,3) COMMENT '调整后数量',
  after_amt decimal(14,2) COMMENT '调整后金额',
  tax_rate decimal(5,3) COMMENT '税率（百分）',
  txn_qty decimal(14,3) COMMENT '数量',
  txn_price decimal(14,4) COMMENT '记账单价',
  txn_amt decimal(14,2) COMMENT '记账金额',
  in_or_out int COMMENT '1出库或0入库 ',
  batch_no string COMMENT '批次号 ',
  reservoir_area_code string COMMENT '库区代码',
  create_time string,
  create_by string,
  update_time string,
  update_by string,
  frozen int COMMENT '冻结',
  adjustment_no string COMMENT '调整单号',
  adjustment_value decimal COMMENT '调整值',
  wms_order_no string COMMENT 'wms库存移动单号',
  move_type string COMMENT '移动类型编码',
  in_out_type string COMMENT '出入库类型',
  credential_no string COMMENT '凭证编号',
  supplier_code string COMMENT '供应商编码',
  wms_batch_no string COMMENT 'wms批次号',
  is_same_company int COMMENT '是否同公司',
  wms_order_type string COMMENT 'WMS订单类型',
  company_code string COMMENT '公司代码',
  credential_item_id bigint COMMENT '凭证明细id',
  valuation_category_name string COMMENT '评估类名称',
  valuation_category_code string COMMENT '评估类编码'
) COMMENT '库存明细'
PARTITIONED BY(sdt STRING COMMENT '昨日，全量更新')
STORED AS TEXTFILE 
LOCATION 'hdfs://nameservice1/user/hive/warehouse/csx_ods.db/accounting_stock_detail_h'



sqoop import \
 --connect jdbc:mysql://10.0.74.114:3306/csx_b2b_accounting?tinyInt1isBit=false \
 --username csx_b2b_accounting_select \
 --password Yh2018b2bcsx_accounting_select_@% \
 --table accounting_stock_detail \
 --fields-terminated-by '\001' -m 1 \
 --columns 'id,product_code,location_code,shipper_code,ref_biz_type,ref_biz_order_no,biz_time,posting_time,before_price,before_qty,before_amt,after_price,after_qty,after_amt,tax_rate,txn_qty,txn_price,txn_amt,in_or_out,batch_no,reservoir_area_code,create_time,create_by,update_time,update_by,frozen,adjustment_no,adjustment_value,wms_order_no,move_type,in_out_type,credential_no,supplier_code,wms_batch_no,is_same_company,wms_order_type,company_code,credential_item_id,valuation_category_name,valuation_category_code' \
 --hive-drop-import-delims \
 --hive-overwrite \
 --hive-import \
 --hive-database csx_ods \
 --hive-table  accounting_stock_detail_h \
 --hive-partition-key sdt \
 --hive-partition-value 'current'
 
 
 
 --元数据刷新
 
INVALIDATE METADATA csx_ods.accounting_stock_detail_h;
 



truncate table csx_ods.accounting_stock_detail_view_h;
CREATE TABLE csx_ods.accounting_stock_detail_view_h (
  id bigint,
  stock_period string COMMENT '会计期间',
  product_code string COMMENT '商品编码',
  product_name string COMMENT '商品名称',
  purchase_group_code string COMMENT '采购组代码',
  unit string COMMENT '计量单位',
  location_code string COMMENT '地点编码',
  location_name string COMMENT '地点名称',
  shipper_code string COMMENT '货主代码',
  shipper_name string COMMENT '货主名称',
  ref_biz_type string COMMENT '参照业务类型',
  ref_biz_order_no string COMMENT '参照业务单号',
  change_source string COMMENT '库存变动来源',
  biz_time string COMMENT '业务时间',
  posting_time string COMMENT '过账时间',
  before_price decimal(14,4) COMMENT '调整前单价',
  before_qty decimal(14,3) COMMENT '调整前数量',
  before_amt decimal(14,2) COMMENT '调整前金额',
  after_price decimal(14,4) COMMENT '调整后单价',
  after_qty decimal(14,3) COMMENT '调整后数量',
  after_amt decimal(14,2) COMMENT '调整后金额',
  tax_rate decimal(5,3) COMMENT '税率（百分）',
  txn_qty decimal(14,3) COMMENT '数量',
  txn_price decimal(14,4) COMMENT '记账单价',
  txn_amt decimal(14,2) COMMENT '记账金额',
  remain_qty decimal(10,2) COMMENT '本批次剩余数量',
  in_or_out int COMMENT '1出库或0入库2调整单',
  batch_no string COMMENT '批次号 ',
  reservoir_area_code string COMMENT '库区代码',
  reservoir_area_name string COMMENT '库区名称',
  create_time string,
  create_by string,
  update_time string,
  update_by string,
  frozen int COMMENT '冻结',
  adjustment_no string COMMENT '调整单号',
  adjustment_value decimal COMMENT '调整值',
  wms_order_no string COMMENT 'wms库存移动单号',
  move_type string COMMENT '移动类型编码',
  in_out_type string COMMENT '出入库类型',
  credential_no string COMMENT '凭证编号',
  supplier_code string COMMENT '供应商编码',
  supplier_type string COMMENT '供应商类型',
  supplier_name string COMMENT '供应商名称',
  move_name string COMMENT '移动类型名称',
  wms_batch_no string COMMENT 'wms批次号',
  purchase_group_name string COMMENT '采购组名称',
  wms_order_type string COMMENT 'WMS订单类型',
  valuation_category_code string COMMENT '评估类编码',
  valuation_category_name string COMMENT '评估类名称',
  purchase_org_code string COMMENT '采购组织编码',
  company_code string COMMENT '公司编码'
 
)  COMMENT '库存明细表-前端接口使用'
PARTITIONED BY(sdt STRING COMMENT '昨日，全量更新')
STORED AS TEXTFILE 
LOCATION 'hdfs://nameservice1/user/hive/warehouse/csx_ods.db/accounting_stock_detail_view_h'
 
 
day=`date -d "yesterday" +%Y%m%d`
sqoop import \
 --connect jdbc:mysql://10.0.74.114:3306/csx_b2b_accounting?tinyInt1isBit=false \
 --username csx_b2b_accounting_select   \
 --password Yh2018b2bcsx_accounting_select_@% \
 --table accounting_stock_detail_view \
 --fields-terminated-by '\001' -m 1 \
 --columns 'id,stock_period,product_code,product_name,purchase_group_code,unit,location_code,location_name,shipper_code,shipper_name,ref_biz_type,ref_biz_order_no,change_source,biz_time,posting_time,before_price,before_qty,before_amt,after_price,after_qty,after_amt,tax_rate,txn_qty,txn_price,txn_amt,remain_qty,in_or_out,batch_no,reservoir_area_code,reservoir_area_name,create_time,create_by,update_time,update_by,frozen,adjustment_no,adjustment_value,wms_order_no,move_type,in_out_type,credential_no,supplier_code,supplier_type,supplier_name,move_name,wms_batch_no,purchase_group_name,wms_order_type,valuation_category_code,valuation_category_name,purchase_org_code,company_code' \
 --hive-drop-import-delims \
 --hive-overwrite \
 --hive-import \
 --hive-database csx_ods \
 --hive-table accounting_stock_detail_view_h \
 --hive-partition-key sdt \
 --hive-partition-value 'current'
 
 
  -- 刷新impala元数据
 INVALIDATE METADATA csx_ods.accounting_stock_detail_view_h;
 
 
 
 truncate table csx_ods.inventory_product_detail_h;
 CREATE TABLE csx_ods.inventory_product_detail_h (
  id bigint COMMENT '主键ID',
  inventory_code string COMMENT '盘点单号',
  product_code string COMMENT '商品编号',
  product_bar_code string COMMENT '商品条形码',
  product_name string COMMENT '商品名称',
  unit string COMMENT '单位',
  category_code string COMMENT '部位编码',
  category_name string COMMENT '部位名称',
  warehouse_code string COMMENT '仓库编号',
  warehouse_name string COMMENT '仓库名称',
  shipper_code string COMMENT '货主编号',
  shipper_name string COMMENT '货主名称',
  reservoir_area_code string COMMENT '库区编码',
  reservoir_area_name string COMMENT '库区名称',
  store_location_code string COMMENT '储位编号',
  store_location_name string COMMENT '储位名称',
  system_store_qty decimal(9,2)  COMMENT '系统库存',
  last_in_price decimal(9,2)  COMMENT '最后一次入库价',
  inventory_qty decimal(9,2)  COMMENT '盘点数量',
  inventory_amount decimal(12,4)  COMMENT '盘点金额',
  inventory_qty_diff decimal(9,2)  COMMENT '盘点差异',
  inventory_amount_diff decimal(12,4)  COMMENT '盘点差异金额',
  posting_flag int  COMMENT '是否过账 0-否 1-是',
  pass_bill_time string COMMENT '盘点时间',
  create_time string  COMMENT '创建时间',
  create_by string COMMENT '盘点用户',
  update_time string  COMMENT '更新时间',
  update_by string COMMENT '更新者'
)  COMMENT '盘点单明细'

PARTITIONED BY (sdt string COMMENT '日期分区')
STORED AS TEXTFILE 
LOCATION 'hdfs://nameservice1/user/hive/warehouse/csx_ods.db/inventory_product_detail_h';







-- 盘点单明细

sqoop import \
 --connect jdbc:mysql://10.0.74.114:3306/csx_b2b_wms?tinyInt1isBit=false \
 --username csx_b2b_wms_select \
 --password Yh2018b2bcsx_wms_select_@% \
 --table wms_inventory_product_detail \
 --fields-terminated-by '\001' -m 1 \
 --columns 'id,inventory_code,product_code,product_bar_code,product_name,unit,category_code,category_name,warehouse_code,warehouse_name,shipper_code,shipper_name,reservoir_area_code,reservoir_area_name,store_location_code,store_location_name,system_store_qty,last_in_price,inventory_qty,inventory_amount,inventory_qty_diff,inventory_amount_diff,posting_flag,pass_bill_time,create_time,create_by,update_time,update_by' \
 --hive-drop-import-delims \
 --hive-overwrite \
 --hive-import \
 --hive-database csx_ods \
 --hive-table  inventory_product_detail_h \
 --hive-partition-key sdt \
 --hive-partition-value 'current'



INVALIDATE METADATA csx_ods.inventory_product_detail_h;
 